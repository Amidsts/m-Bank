{"version":3,"file":"helpers.js","sourceRoot":"src/","sources":["utils/helpers.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,gEAA+B;AAC/B,oDAA4B;AAG5B,gDAA+C;AAC/C,yCAAsC;AAEtC,yDAAmC;AACnC,yCAA4C;AAE5C,MAAM,EAAE,eAAe,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,iBAAS,CAAC;AAEzE,SAAsB,YAAY,CAAC,QAAwB,EAAE,GAAa;;QACxE,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,QAAQ,EAAE,CAAC;YAE5B,OAAO,QAAQ,CAAA;QACjB,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAA,yBAAc,EAAC;gBACb,GAAG;gBACH,GAAG;gBACH,OAAO,EAAE,2BAA2B,GAAG,CAAC,OAAO,EAAE;gBACjD,MAAM,EAAE,GAAG;aACZ,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CAAA;AAbD,oCAaC;AAED,SAAsB,cAAc;;QAClC,IAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,UAAU,CAAC,GAAG,UAAU,CAAC,CAAC;QAEzE,IAAI,WAAW,GAAG,MAAM,2BAAa,CAAC,OAAO,CAAC,MAAM,CAAC,WAAI,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;QAEvE,OAAO,WAAW,CAAC,MAAM,EAAE,CAAC;YAC1B,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,UAAU,CAAC,GAAG,UAAU,CAAC,CAAC;YAErE,WAAW,GAAG,MAAM,2BAAa,CAAC,OAAO,CAAC,MAAM,CAAC,WAAI,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;QACrE,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CAAA;AAZD,wCAYC;AAED,SAAgB,aAAa,CAAC,EAC5B,IAAI,EACJ,SAAS,GAAG,eAAe,EAC3B,QAAQ,GAAG,KAAK,GAKjB;IACC,sBAAG,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE;QACxB,SAAS;QACT,MAAM,EAAE,SAAS,iBAAS,CAAC,WAAW,EAAE;QACxC,QAAQ,EAAE,GAAG,QAAQ,OAAO;KAC7B,CAAC,CAAC;AACL,CAAC;AAdD,sCAcC;AAED,SAAsB,YAAY,CAAC,QAAgB;;QACjD,MAAM,IAAI,GAAG,MAAM,gBAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC9C,MAAM,cAAc,GAAG,MAAM,gBAAM,CAAC,IAAI,CAAC,QAAQ,GAAG,UAAU,EAAE,IAAI,CAAC,CAAC;QAEtE,OAAO,cAAc,CAAC;IACxB,CAAC;CAAA;AALD,oCAKC;AAED,SAAgB,eAAe,CAAC,QAAgB;IAC9C,OAAO,gBAAM,CAAC,WAAW,CAAC,QAAQ,GAAG,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AAClE,CAAC;AAFD,0CAEC","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcrypt\";\nimport { Response } from \"express\";\n\nimport { AppDataSource } from \"../data-source\";\nimport { Auth } from \"../entity/auth\";\nimport { IToken } from \"./types\";\nimport appConfig from \"../configs\";\nimport { handleResponse } from \"./response\";\n\nconst { sessionLifeSpan, saltRounds, jwtSecret, hashPepper } = appConfig;\n\nexport async function asyncWrapper(callback: () => Response, res: Response) {\n  try {\n    const response = callback();\n\n    return response\n  } catch (err) {\n    handleResponse({\n      res,\n      err,\n      message: `Internal Server Error:  ${err.message}`,\n      status: 500,\n    });\n  }\n}\n\nexport async function generateAcctNo() {\n  let acctNo = String(Math.floor(Math.random() * 9000000000) + 1000000000);\n\n  let acctNoExist = await AppDataSource.manager.findBy(Auth, { acctNo });\n\n  while (acctNoExist.length) {\n    acctNo = String(Math.floor(Math.random() * 9000000000) + 1000000000);\n\n    acctNoExist = await AppDataSource.manager.findBy(Auth, { acctNo });\n  }\n\n  return acctNo;\n}\n\nexport function generateToken({\n  data,\n  expiresIn = sessionLifeSpan,\n  audience = \"web\",\n}: {\n  data: IToken;\n  expiresIn?: number;\n  audience?: \"web\";\n}) {\n  jwt.sign(data, jwtSecret, {\n    expiresIn,\n    issuer: `mBank-${appConfig.environment}`,\n    audience: `${audience}-user`,\n  });\n}\n\nexport async function hashPassword(password: string) {\n  const salt = await bcrypt.genSalt(saltRounds);\n  const hashedPassword = await bcrypt.hash(password + hashPepper, salt);\n\n  return hashedPassword;\n}\n\nexport function comparePassword(password: string) {\n  return bcrypt.compareSync(password + hashPepper, this.password);\n}\n"]}