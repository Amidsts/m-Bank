{"version":3,"file":"signUp.js","sourceRoot":"src/","sources":["components/Auth/controllers/signUp.ts"],"names":[],"mappings":";;;;;;;;;;;AAIA,sDAAyD;AASzD,8DAAkE;AAGlE,SAAe,gBAAgB,CAAC,GAAa,EAAE,GAAa;;QAC1D,MAAM,EACJ,SAAS,EACT,QAAQ,EACR,KAAK,EACL,QAAQ,EACR,OAAO,EACP,KAAK,GACN,GAAiC,GAAG,CAAC,IAAI,CAAC;QAE3C,IAAI,CAAC;YACH,yEAAyE;YAEzE,wBAAwB;YACxB,4BAA4B;YAC5B,WAAW;YACX,+DAA+D;YAC/D,mBAAmB;YACnB,QAAQ;YAER,yCAAyC;YAEzC,2BAA2B;YAC3B,8BAA8B;YAC9B,4BAA4B;YAC5B,8CAA8C;YAC9C,sBAAsB;YACtB,0BAA0B;YAC1B,+BAA+B;YAC/B,iCAAiC;YAEjC,2BAA2B;YAC3B,oBAAoB;YACpB,gDAAgD;YAChD,wBAAwB;YACxB,sBAAsB;YACtB,+BAA+B;YAE/B,uDAAuD;YACvD,8BAA8B;YAC9B,8BAA8B;YAC9B,MAAM;YAEN,MAAM,IAAA,4BAAgB,EAAC,OAAO,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC;YAC3D,2DAA2D;YAE3D,OAAO,CAAC,GAAG,CAAC;gBACV,SAAS;gBACT,QAAQ;gBACR,KAAK;gBACL,QAAQ;gBACR,OAAO;gBACP,KAAK;aACN,CAAC,CAAC;YACH,OAAO,IAAA,yBAAc,EAAC;gBACpB,GAAG;gBACH,OAAO,EAAE,8BAA8B;aACxC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAA,yBAAc,EAAC;gBACb,GAAG;gBACH,GAAG;gBACH,OAAO,EAAE,2BAA2B,GAAG,CAAC,OAAO,EAAE;gBACjD,MAAM,EAAE,GAAG;aACZ,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CAAA;AAED,kBAAe,gBAAgB,CAAC;AAEhC;;;;;;GAMG","sourcesContent":["import { Response } from \"express\";\nimport { z } from \"zod\";\n\nimport { IRequest } from \"../../../utils/types\";\nimport { handleResponse } from \"../../../utils/response\";\nimport { signUpSchema } from \"../auth.validators\";\nimport { AppDataSource } from \"../../../data-source\";\nimport { User } from \"../../../entity/user\";\nimport { Auth } from \"../../../entity/auth\";\nimport {\n  generateAcctNo,\n  hashPassword,\n} from \"../../../utils/helpers\";\nimport { sendNewAcctNoSms } from \"../../../configs/sms/templates\";\nimport { sendNewAccountNoMail } from \"../../../configs/email/template\";\n\nasync function signupController(req: IRequest, res: Response) {\n  const {\n    firstName,\n    lastName,\n    email,\n    password,\n    phoneNo,\n    txPin,\n  }: z.infer<typeof signUpSchema> = req.body;\n\n  try {\n    // const userExist = await AppDataSource.manager.findBy(User, { email });\n\n    // if (userExist.length)\n    //   return handleResponse({\n    //     res,\n    //     message: \"Account already exists, Login instead please\",\n    //     status: 409,\n    //   });\n\n    // const acctNo = await generateAcctNo();\n\n    // const user = new User();\n    // user.firstName = firstName;\n    // user.lastName = lastName;\n    // user.fullName = `${firstName} ${lastName}`;\n    // user.email = email;\n    // user.phoneNo = phoneNo;\n    // user.createdAt = new Date();\n    // user.lastLoginAt = new Date();\n\n    // const auth = new Auth();\n    // auth.user = user;\n    // auth.password = await hashPassword(password);\n    // auth.acctNo = acctNo;\n    // auth.txPin = txPin;\n    // auth.createdAt = new Date();\n\n    // await AppDataSource.transaction(async (manager) => {\n    //   await manager.save(user);\n    //   await manager.save(auth);\n    // });\n\n    await sendNewAcctNoSms(phoneNo, \"user.fullName\", \"acctNo\");\n    // await sendNewAccountNoMail(email, user.fullName, acctNo)\n\n    console.log({\n      firstName,\n      lastName,\n      email,\n      password,\n      phoneNo,\n      txPin,\n    });\n    return handleResponse({\n      res,\n      message: \"Account created successfully\",\n    });\n  } catch (err) {\n    handleResponse({\n      res,\n      err,\n      message: `Internal Server Error:  ${err.message}`,\n      status: 500,\n    });\n  }\n}\n\nexport default signupController;\n\n/**\n * after the user login\n * send an sms (of the account number) to the registered phone number\n * request for multifactor authentication (register fingerprint)\n * if MFA is not set, account issetupcomplete is false\n * user cannot login until he set up MFA with fingerprint\n */\n"]}